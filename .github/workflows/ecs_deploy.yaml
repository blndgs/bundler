name: Deploy to ECS

on:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches: [main, testnet, live, stage]
  workflow_dispatch:

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Enforce module version
        uses: adelowo/enforce-gomod-version@v0.2.0
        with:
          modules: |
            github.com/ethereum/go-ethereum => v1.11.5

      - name: Display branch information
        run: |
          echo "Running on branch: ${{ github.ref_name }}"
          if [[ -n "${{ github.base_ref }}" ]]; then
            echo "Target branch for pull request: ${{ github.base_ref }}"
          else
            echo "Not running on a pull request"
          fi

      - name: Determine Environment Prefix
        id: env_prefix
        run: |
          BRANCH=${{ github.base_ref }}  # This is set for pull requests
          [ -z "$BRANCH" ] && BRANCH=${{ github.ref_name }}  # Fallback to current branch if not a pull request
          PREFIX=$(echo $BRANCH | awk -F'-' '{print toupper($1)}')  # Extract prefix and convert to upper case
          echo "PREFIX=$PREFIX" >> $GITHUB_ENV
          echo "PREFIX=$PREFIX"

      - name: Run Tests
        run: make test

      - name: Run Integration Tests
        env:
          TEST_RPC_URL: ${{ secrets[format('{0}_ERC4337_BUNDLER_ETH_CLIENT_URL', env.PREFIX)] }}
        run: make test-integration

  deploy:
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/'))
    name: Deploy Image and Env Variables
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        network:
          - eth
          - bsc
          - polygon

    steps:
      - uses: actions/checkout@v4

      - name: Determine Environment Prefix
        id: env_prefix
        run: |
          BRANCH=${{ github.base_ref }}  # This is set for pull requests
          [ -z "$BRANCH" ] && BRANCH=${{ github.ref_name }}  # Fallback to current branch if not a pull request
          PREFIX=$(echo $BRANCH | awk -F'-' '{print toupper($1)}')  # Extract prefix and convert to upper case
          echo "PREFIX=$PREFIX" >> $GITHUB_ENV
          echo "PREFIX=$PREFIX"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets[format('{0}_AWS_ACCESS_KEY_ID', env.PREFIX)] }}
          aws-secret-access-key: ${{ secrets[format('{0}_AWS_SECRET_ACCESS_KEY', env.PREFIX)] }}
          aws-region: ${{ secrets[format('{0}_AWS_REGION', env.PREFIX)] }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets[format('{0}_AWS_REPOSITORY', env.PREFIX)] }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          MODEL_VERSION=$(go list -m github.com/blndgs/model | cut -d ' ' -f2)
          FLAG_IMAGE_TAG_EXISTS=$(aws ecr describe-images --repository-name ${ECR_REPOSITORY} --image-ids imageTag=${IMAGE_TAG} 1>/dev/null 2>&1; echo $?)
          if [ ${FLAG_IMAGE_TAG_EXISTS} -ne 0 ];then
              docker build --build-arg COMMIT_ID=${IMAGE_TAG} --build-arg MODEL_VERSION=${MODEL_VERSION} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
              docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          else
              echo "Image already exists on ECR, proceeding with deployment ..."
          fi

      - name: Change task definition for ${{ matrix.network }}
        id: change_task_definition
        env:
          VAR_ENV_NAME: ${{ secrets[format('{0}_ENV_NAME', env.PREFIX)] }}
          VAR_APP_NAME: "bundler-${{ matrix.network }}"
          VAR_IMAGE: ${{ secrets[format('{0}_ECR_URL', env.PREFIX)] }}/${{ secrets[format('{0}_AWS_REPOSITORY', env.PREFIX)] }}:${{ github.sha }}
          VAR_ERC4337_BUNDLER_ETH_CLIENT_URL: ${{ secrets[format('{0}_ERC4337_BUNDLER_{1}_CLIENT_URL', env.PREFIX, matrix.network)] }}
          VAR_ERC4337_BUNDLER_PRIVATE_KEY: ${{ secrets[format('{0}_ERC4337_BUNDLER_PRIVATE_KEY', env.PREFIX)] }}
          VAR_ERC4337_BUNDLER_MAX_BATCH_GAS_LIMIT: ${{ secrets[format('{0}_ERC4337_BUNDLER_MAX_BATCH_GAS_LIMIT', env.PREFIX)] }}
          VAR_ERC4337_BUNDLER_DEBUG_MODE: ${{ secrets[format('{0}_ERC4337_BUNDLER_DEBUG_MODE', env.PREFIX)] }}
          VAR_SOLVER_URL: ${{ secrets[format('{0}_SOLVER_URL', env.PREFIX)] }}
          VAR_AWS_REGION: ${{ secrets[format('{0}_AWS_REGION', env.PREFIX)] }}
          VAR_ERC4337_BUNDLER_OTEL_IS_ENABLED: true
          VAR_ERC4337_BUNDLER_OTEL_COLLECTOR_URL: ${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}
          VAR_ERC4337_BUNDLER_OTEL_COLLECTOR_HEADERS: ${{ secrets.OTEL_EXPORTER_OTLP_HEADERS }}
          VAR_ERC4337_ERC4337_BUNDLER_SERVICE_NAME: ${{ vars[format('{0}_BUNDLER_SERVICE_NAME', env.PREFIX)] }}
          VAR_ERC4337_BUNDLER_TENDERLY_ENABLE_SIMULATION: ${{ vars[format('{0}_BUNDLER_TENDERLY_ENABLE_SIMULATION', env.PREFIX)] }}
          VAR_ERC4337_BUNDLER_SIMULATION_URL: ${{ vars[format('{0}_BUNDLER_SIMULATION_URL', env.PREFIX)] }}
          FILE_NAME: task-definition-${{ matrix.network }}.json
        run: |
          cp -p .github/task-definition.json ${FILE_NAME}
          sed -i "s+AWS_REGION+${VAR_AWS_REGION}+g" ${FILE_NAME}
          sed -i "s+ENV_NAME+${VAR_ENV_NAME}+g" ${FILE_NAME}
          sed -i "s+APP_NAME+${VAR_APP_NAME}+g" ${FILE_NAME}
          sed -i "s+IMAGE+${VAR_IMAGE}+g" ${FILE_NAME}
          sed -i "s+VAR_ERC4337_BUNDLER_ETH_CLIENT_URL+${VAR_ERC4337_BUNDLER_ETH_CLIENT_URL}+g" ${FILE_NAME}
          sed -i "s+VAR_ERC4337_BUNDLER_PRIVATE_KEY+${VAR_ERC4337_BUNDLER_PRIVATE_KEY}+g" ${FILE_NAME}
          sed -i "s+VAR_ERC4337_BUNDLER_MAX_BATCH_GAS_LIMIT+${VAR_ERC4337_BUNDLER_MAX_BATCH_GAS_LIMIT}+g" ${FILE_NAME}
          sed -i "s+VAR_ERC4337_BUNDLER_DEBUG_MODE+${VAR_ERC4337_BUNDLER_DEBUG_MODE}+g" ${FILE_NAME}
          sed -i "s+VAR_SOLVER_URL+${VAR_SOLVER_URL}+g" ${FILE_NAME}
          sed -i "s+VAR_ERC4337_BUNDLER_OTEL_IS_ENABLED+${VAR_ERC4337_BUNDLER_OTEL_IS_ENABLED}+g" ${FILE_NAME}
          sed -i "s+VAR_ERC4337_BUNDLER_OTEL_COLLECTOR_URL+${VAR_ERC4337_BUNDLER_OTEL_COLLECTOR_URL}+g" ${FILE_NAME}
          sed -i "s+VAR_ERC4337_BUNDLER_OTEL_COLLECTOR_HEADERS+${VAR_ERC4337_BUNDLER_OTEL_COLLECTOR_HEADERS}+g" ${FILE_NAME}
          sed -i "s+VAR_ERC4337_ERC4337_BUNDLER_SERVICE_NAME+${VAR_ERC4337_ERC4337_BUNDLER_SERVICE_NAME}+g" ${FILE_NAME}
          sed -i "s+VAR_ERC4337_BUNDLER_TENDERLY_ENABLE_SIMULATION+${VAR_ERC4337_BUNDLER_TENDERLY_ENABLE_SIMULATION}+g" ${FILE_NAME}
          sed -i "s+VAR_ERC4337_BUNDLER_SIMULATION_URL+${VAR_ERC4337_BUNDLER_SIMULATION_URL}+g" ${FILE_NAME}
          cat ${FILE_NAME}

      - name: Deploy Amazon ECS task definition to bundler-${{ matrix.network }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          cluster: ${{ secrets[format('{0}_ENV_NAME', env.PREFIX)] }}-backend
          service: ${{ secrets[format('{0}_ENV_NAME', env.PREFIX)] }}-bundler-${{ matrix.network }}
          task-definition: task-definition-${{ matrix.network }}.json
          wait-for-service-stability: false
          wait-for-minutes: 5

  run-integration-tests:
    name: Trigger E2Etests
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Determine Environment Prefix
        id: env_prefix
        run: |
          BRANCH=${{ github.base_ref }}  # This is set for pull requests
          [ -z "$BRANCH" ] && BRANCH=${{ github.ref_name }}  # Fallback to current branch if not a pull request
          PREFIX=$(echo $BRANCH | awk -F'-' '{print toupper($1)}')  # Extract prefix and convert to upper case
          echo "PREFIX=$PREFIX" >> $GITHUB_ENV
          echo "PREFIX=$PREFIX"

      - name: Trigger E2Etests
        run: |
          branch=$(echo ${{ env.PREFIX }} | awk '{print tolower($1)}')  
          response=$(curl -L -X POST -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{secrets.GH_ACTION_TRIGGER_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/blndgs/e2etests/actions/workflows/test-infra.yml/dispatches \
          -d "{\"ref\": \"${branch}\"}" \
          -w "%{http_code}")

          http_code=$(echo "$response" | tail -n1)

          if [ "$http_code" -le 204 ]; then
            echo "Workflow dispatch successful! (Status code: $http_code)"
          else
            echo "Workflow dispatch failed. (Status code: $http_code)"
            exit 128;
          fi
