name: Deploy to ECR

on:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches: [test_ecs_deploy]
  workflow_dispatch:

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Enforce module version
        uses: adelowo/enforce-gomod-version@v0.2.0
        with:
          modules: |
            github.com/ethereum/go-ethereum => v1.11.5

      - name: Display branch information
        run: |
          echo "Running on branch: ${{ github.ref_name }}"
          if [[ -n "${{ github.base_ref }}" ]]; then
            echo "Target branch for pull request: ${{ github.base_ref }}"
          else
            echo "Not running on a pull request"
          fi

      - name: Determine Environment Prefix
        id: env_prefix
        run: |
          BRANCH=${{ github.base_ref }}  # This is set for pull requests
          [ -z "$BRANCH" ] && BRANCH=${{ github.ref_name }}  # Fallback to current branch if not a pull request
          PREFIX=$(echo $BRANCH | awk -F'-' '{print toupper($1)}')  # Extract prefix and convert to upper case
          echo "PREFIX=$PREFIX" >> $GITHUB_ENV
          echo "PREFIX=$PREFIX"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets[format('{0}_AWS_ACCESS_KEY_ID', env.PREFIX)] }}
          aws-secret-access-key: ${{ secrets[format('{0}_AWS_SECRET_ACCESS_KEY', env.PREFIX)] }}
          aws-region: ${{ secrets[format('{0}_AWS_REGION', env.PREFIX)] }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets[format('{0}_AWS_REPOSITORY', env.PREFIX)] }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    name: Deploy Image and Env Variables
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/'))
    steps:
      - name: Determine Environment Prefix
        id: env_prefix
        run: |
          BRANCH=${{ github.base_ref }}  # This is set for pull requests
          [ -z "$BRANCH" ] && BRANCH=${{ github.ref_name }}  # Fallback to current branch if not a pull request
          #PREFIX=$(echo $BRANCH | awk -F'-' '{print toupper($1)}')  # Extract prefix and convert to upper case
          PREFIX=dev
          echo "PREFIX=$PREFIX" >> $GITHUB_ENV
          echo "PREFIX=$PREFIX"
      - uses: actions/checkout@v2

      - name: Change task definition
        id: change_task_definition
        run: |
          cp -p .github/task-definition.json task-definition.json
          sed -i 's/ENV_NAME/${{ secrets[format('{0}_ENV_NAME', env.PREFIX)] }}/g' task-definition.json
          sed -i 's/APP_NAME/bundler/g' task-definition.json
          sed -i 's/IMAGE/${{ secrets[format('{0}_ECR_URL', env.PREFIX)] }}/${{ secrets[format('{0}_AWS_REPOSITORY', env.PREFIX)] }}:${{ github.sha }}/g' task-definition.json
          sed -i 's/VAR_ERC4337_BUNDLER_ETH_CLIENT_URL/${{ secrets[format('{0}_ERC4337_BUNDLER_ETH_CLIENT_URL', env.PREFIX)] }}/g' task-definition.json
          sed -i 's/VAR_ERC4337_BUNDLER_PRIVATE_KEY/${{ secrets[format('{0}_ERC4337_BUNDLER_PRIVATE_KEY', env.PREFIX)] }}/g' task-definition.json
          sed -i 's/VAR_ERC4337_BUNDLER_MAX_BATCH_GAS_LIMIT/${{ secrets[format('{0}_ERC4337_BUNDLER_MAX_BATCH_GAS_LIMIT', env.PREFIX)] }}/g' task-definition.json
          sed -i 's/VAR_ERC4337_BUNDLER_DEBUG_MODE/${{ secrets[format('{0}_ERC4337_BUNDLER_DEBUG_MODE', env.PREFIX)] }}/g' task-definition.json
          sed -i 's/VAR_SOLVER_URL/${{ secrets[format('{0}_SOLVER_URL', env.PREFIX)] }}/g' task-definition.json
          sed -i 's/AWS_REGION/${{ secrets[format('{0}_AWS_REGION', env.PREFIX)] }}/g' task-definition.json
